# Generated by Django 4.1.5 on 2023-01-16 05:44

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import simple_history.models


class Migration(migrations.Migration):

    dependencies = [
        ("djf_surveys", "0012_question_org_survey_org"),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ("vendor", "0027_merge_0026_historicaldocument_0026_historicalvendor"),
    ]

    operations = [
        migrations.CreateModel(
            name="VendorSurvey",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=200, verbose_name="name")),
                (
                    "description",
                    models.TextField(default="", verbose_name="description"),
                ),
                (
                    "slug",
                    models.SlugField(default="", max_length=225, verbose_name="slug"),
                ),
                (
                    "editable",
                    models.BooleanField(
                        default=True,
                        help_text="If False, user can't edit record.",
                        verbose_name="editable",
                    ),
                ),
                (
                    "deletable",
                    models.BooleanField(
                        default=True,
                        help_text="If False, user can't delete record.",
                        verbose_name="deletable",
                    ),
                ),
                (
                    "duplicate_entry",
                    models.BooleanField(
                        default=False,
                        help_text="If True, user can resubmit.",
                        verbose_name="mutiple submissions",
                    ),
                ),
                (
                    "private_response",
                    models.BooleanField(
                        default=False,
                        help_text="If True, only admin and owner can access.",
                        verbose_name="private response",
                    ),
                ),
                (
                    "can_anonymous_user",
                    models.BooleanField(
                        default=False,
                        help_text="If True, user without authentatication can submit.",
                        verbose_name="anonymous submission",
                    ),
                ),
                ("created_at", models.DateField(auto_now_add=True, null=True)),
                ("updated_at", models.DateField(auto_now=True, null=True)),
                ("active", models.BooleanField(default=True)),
                (
                    "survey",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="survey",
                        to="djf_surveys.survey",
                        verbose_name="survey",
                    ),
                ),
                (
                    "vendor",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="vendor.vendor",
                    ),
                ),
            ],
            options={
                "verbose_name": "survey",
                "verbose_name_plural": "surveys",
            },
        ),
        migrations.CreateModel(
            name="VendorSurveyUserAnswer",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "survey",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="vendor.vendorsurvey",
                        verbose_name="survey",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="user",
                    ),
                ),
            ],
            options={
                "verbose_name": "user answer",
                "verbose_name_plural": "user answers",
                "ordering": ["-updated_at"],
            },
        ),
        migrations.CreateModel(
            name="VendorSurveyQuestion",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "key",
                    models.CharField(
                        blank=True,
                        default="",
                        help_text="Unique key for this question, fill in the blank if you want to use for automatic generation.",
                        max_length=225,
                        unique=True,
                        verbose_name="key",
                    ),
                ),
                (
                    "label",
                    models.CharField(
                        help_text="Enter your question in here.",
                        max_length=500,
                        verbose_name="label",
                    ),
                ),
                (
                    "type_field",
                    models.PositiveSmallIntegerField(
                        choices=[
                            (0, "Text"),
                            (1, "Number"),
                            (2, "Radio"),
                            (3, "Select"),
                            (4, "Multi Select"),
                            (5, "Text Area"),
                            (6, "URL"),
                            (7, "Email"),
                            (8, "Date"),
                            (9, "Rating"),
                        ],
                        verbose_name="type of input field",
                    ),
                ),
                (
                    "choices",
                    models.TextField(
                        blank=True,
                        help_text="If type of field is radio, select, or multi select, fill in the options separated by commas. Ex: Male, Female.",
                        null=True,
                        verbose_name="choices",
                    ),
                ),
                (
                    "help_text",
                    models.CharField(
                        blank=True,
                        help_text="You can add a help text in here.",
                        max_length=200,
                        null=True,
                        verbose_name="help text",
                    ),
                ),
                (
                    "required",
                    models.BooleanField(
                        default=True,
                        help_text="If True, the user must provide an answer to this question.",
                        verbose_name="required",
                    ),
                ),
                (
                    "ordering",
                    models.PositiveIntegerField(
                        default=0,
                        help_text="Defines the question order within the surveys.",
                        verbose_name="choices",
                    ),
                ),
                (
                    "survey",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="questions",
                        to="vendor.vendorsurvey",
                        verbose_name="survey",
                    ),
                ),
                (
                    "vendor",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="vendor.vendor",
                    ),
                ),
            ],
            options={
                "verbose_name": "question",
                "verbose_name_plural": "questions",
                "ordering": ["ordering"],
            },
        ),
        migrations.CreateModel(
            name="VendorSurveyAnswer",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "value",
                    models.TextField(
                        help_text="The value of the answer given by the user.",
                        verbose_name="value",
                    ),
                ),
                (
                    "question",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="answers",
                        to="vendor.vendorsurveyquestion",
                        verbose_name="question",
                    ),
                ),
                (
                    "user_answer",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="djf_surveys.useranswer",
                        verbose_name="user answer",
                    ),
                ),
            ],
            options={
                "verbose_name": "answer",
                "verbose_name_plural": "answers",
                "ordering": ["question__ordering"],
            },
        ),
        migrations.CreateModel(
            name="HistoricalVendorSurveyUserAnswer",
            fields=[
                (
                    "id",
                    models.BigIntegerField(
                        auto_created=True, blank=True, db_index=True, verbose_name="ID"
                    ),
                ),
                ("created_at", models.DateTimeField(blank=True, editable=False)),
                ("updated_at", models.DateTimeField(blank=True, editable=False)),
                ("history_id", models.AutoField(primary_key=True, serialize=False)),
                ("history_date", models.DateTimeField()),
                ("history_change_reason", models.CharField(max_length=100, null=True)),
                (
                    "history_type",
                    models.CharField(
                        choices=[("+", "Created"), ("~", "Changed"), ("-", "Deleted")],
                        max_length=1,
                    ),
                ),
                (
                    "history_user",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "survey",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to="vendor.vendorsurvey",
                        verbose_name="survey",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="user",
                    ),
                ),
            ],
            options={
                "verbose_name": "historical user answer",
                "ordering": ("-history_date", "-history_id"),
                "get_latest_by": "history_date",
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name="HistoricalVendorSurveyQuestion",
            fields=[
                (
                    "id",
                    models.BigIntegerField(
                        auto_created=True, blank=True, db_index=True, verbose_name="ID"
                    ),
                ),
                ("created_at", models.DateTimeField(blank=True, editable=False)),
                ("updated_at", models.DateTimeField(blank=True, editable=False)),
                (
                    "key",
                    models.CharField(
                        blank=True,
                        db_index=True,
                        default="",
                        help_text="Unique key for this question, fill in the blank if you want to use for automatic generation.",
                        max_length=225,
                        verbose_name="key",
                    ),
                ),
                (
                    "label",
                    models.CharField(
                        help_text="Enter your question in here.",
                        max_length=500,
                        verbose_name="label",
                    ),
                ),
                (
                    "type_field",
                    models.PositiveSmallIntegerField(
                        choices=[
                            (0, "Text"),
                            (1, "Number"),
                            (2, "Radio"),
                            (3, "Select"),
                            (4, "Multi Select"),
                            (5, "Text Area"),
                            (6, "URL"),
                            (7, "Email"),
                            (8, "Date"),
                            (9, "Rating"),
                        ],
                        verbose_name="type of input field",
                    ),
                ),
                (
                    "choices",
                    models.TextField(
                        blank=True,
                        help_text="If type of field is radio, select, or multi select, fill in the options separated by commas. Ex: Male, Female.",
                        null=True,
                        verbose_name="choices",
                    ),
                ),
                (
                    "help_text",
                    models.CharField(
                        blank=True,
                        help_text="You can add a help text in here.",
                        max_length=200,
                        null=True,
                        verbose_name="help text",
                    ),
                ),
                (
                    "required",
                    models.BooleanField(
                        default=True,
                        help_text="If True, the user must provide an answer to this question.",
                        verbose_name="required",
                    ),
                ),
                (
                    "ordering",
                    models.PositiveIntegerField(
                        default=0,
                        help_text="Defines the question order within the surveys.",
                        verbose_name="choices",
                    ),
                ),
                ("history_id", models.AutoField(primary_key=True, serialize=False)),
                ("history_date", models.DateTimeField()),
                ("history_change_reason", models.CharField(max_length=100, null=True)),
                (
                    "history_type",
                    models.CharField(
                        choices=[("+", "Created"), ("~", "Changed"), ("-", "Deleted")],
                        max_length=1,
                    ),
                ),
                (
                    "history_user",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "survey",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to="vendor.vendorsurvey",
                        verbose_name="survey",
                    ),
                ),
                (
                    "vendor",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to="vendor.vendor",
                    ),
                ),
            ],
            options={
                "verbose_name": "historical question",
                "ordering": ("-history_date", "-history_id"),
                "get_latest_by": "history_date",
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name="HistoricalVendorSurveyAnswer",
            fields=[
                (
                    "id",
                    models.BigIntegerField(
                        auto_created=True, blank=True, db_index=True, verbose_name="ID"
                    ),
                ),
                ("created_at", models.DateTimeField(blank=True, editable=False)),
                ("updated_at", models.DateTimeField(blank=True, editable=False)),
                (
                    "value",
                    models.TextField(
                        help_text="The value of the answer given by the user.",
                        verbose_name="value",
                    ),
                ),
                ("history_id", models.AutoField(primary_key=True, serialize=False)),
                ("history_date", models.DateTimeField()),
                ("history_change_reason", models.CharField(max_length=100, null=True)),
                (
                    "history_type",
                    models.CharField(
                        choices=[("+", "Created"), ("~", "Changed"), ("-", "Deleted")],
                        max_length=1,
                    ),
                ),
                (
                    "history_user",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "question",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to="vendor.vendorsurveyquestion",
                        verbose_name="question",
                    ),
                ),
                (
                    "user_answer",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to="djf_surveys.useranswer",
                        verbose_name="user answer",
                    ),
                ),
            ],
            options={
                "verbose_name": "historical answer",
                "ordering": ("-history_date", "-history_id"),
                "get_latest_by": "history_date",
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name="HistoricalVendorSurvey",
            fields=[
                (
                    "id",
                    models.BigIntegerField(
                        auto_created=True, blank=True, db_index=True, verbose_name="ID"
                    ),
                ),
                ("name", models.CharField(max_length=200, verbose_name="name")),
                (
                    "description",
                    models.TextField(default="", verbose_name="description"),
                ),
                (
                    "slug",
                    models.SlugField(default="", max_length=225, verbose_name="slug"),
                ),
                (
                    "editable",
                    models.BooleanField(
                        default=True,
                        help_text="If False, user can't edit record.",
                        verbose_name="editable",
                    ),
                ),
                (
                    "deletable",
                    models.BooleanField(
                        default=True,
                        help_text="If False, user can't delete record.",
                        verbose_name="deletable",
                    ),
                ),
                (
                    "duplicate_entry",
                    models.BooleanField(
                        default=False,
                        help_text="If True, user can resubmit.",
                        verbose_name="mutiple submissions",
                    ),
                ),
                (
                    "private_response",
                    models.BooleanField(
                        default=False,
                        help_text="If True, only admin and owner can access.",
                        verbose_name="private response",
                    ),
                ),
                (
                    "can_anonymous_user",
                    models.BooleanField(
                        default=False,
                        help_text="If True, user without authentatication can submit.",
                        verbose_name="anonymous submission",
                    ),
                ),
                ("created_at", models.DateField(blank=True, editable=False, null=True)),
                ("updated_at", models.DateField(blank=True, editable=False, null=True)),
                ("active", models.BooleanField(default=True)),
                ("history_id", models.AutoField(primary_key=True, serialize=False)),
                ("history_date", models.DateTimeField()),
                ("history_change_reason", models.CharField(max_length=100, null=True)),
                (
                    "history_type",
                    models.CharField(
                        choices=[("+", "Created"), ("~", "Changed"), ("-", "Deleted")],
                        max_length=1,
                    ),
                ),
                (
                    "history_user",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "survey",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to="djf_surveys.survey",
                        verbose_name="survey",
                    ),
                ),
                (
                    "vendor",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to="vendor.vendor",
                    ),
                ),
            ],
            options={
                "verbose_name": "historical survey",
                "ordering": ("-history_date", "-history_id"),
                "get_latest_by": "history_date",
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
    ]
